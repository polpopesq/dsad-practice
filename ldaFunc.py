import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA, QuadraticDiscriminantAnalysis as QDA
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.datasets import load_iris


def perform_discriminant_analysis(X, y, model_type="LDA"):
    """
    AplicÄƒ Linear Discriminant Analysis (LDA) sau Quadratic Discriminant Analysis (QDA) pe setul de date.
    LDA separa datele cu o dreapta (hiperplan in MD), QDA separa datele cu o curba (suprafete de separare curbate in MD)
    LDA reduce dimensiunea N -> C-1 dimens
    QDA separa clasele in spatiul original
    ReturneazÄƒ modelul antrenat, scorurile, predicÈ›iile È™i evaluarea.

    :param X: Variabilele independente (features)
    :param y: Variabila dependentÄƒ (etichetele claselor)
    :param model_type: "LDA" pentru model liniar, "QDA" pentru model bayesian
    :return: DicÈ›ionar cu modelul, scorurile, predicÈ›iile È™i evaluarea
    """

    # 1. ÃŽmpÄƒrÈ›im datele Ã®n set de antrenare È™i testare
    # test_size: procent pt testare
    # stratify: se asigurÄƒ cÄƒ distribuÈ›ia claselor din y este proporÈ›ionalÄƒ Ã®n ambele subseturi.
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

    """
        Param iesire:
        X_train â€“ datele de antrenament (features)
        X_test â€“ datele de testare (features)
        y_train â€“ etichetele claselor pentru antrenament
        y_test â€“ etichetele claselor pentru testare
    """

    # 2. Alegem modelul (LDA sau QDA)
    if model_type == "LDA":
        model = LDA()
    else:
        model = QDA()

    # 3. AntrenÄƒm modelul
    model.fit(X_train, y_train)

    """
    ÃŽn timpul antrenÄƒrii, LDA:
        CalculeazÄƒ media fiecÄƒrei clase.
        CalculeazÄƒ variaÈ›ia intra-clasÄƒ È™i inter-clasÄƒ.
        DeterminÄƒ direcÈ›iile optime pentru separarea claselor.
    """

    # 4. CalculÄƒm scorurile discriminante pentru setul de antrenare
    ## Calcul scoruri discriminante model liniar/bayesian
    if model_type == "LDA":
        scores = model.transform(X_train)  # QDA nu are transform
    else:
        scores = None  # QDA nu creeazÄƒ un nou spaÈ›iu de proiecÈ›ie

    """
        model.transform(X_train) â†’ ProiecteazÄƒ fiecare observaÈ›ie din X_train pe noile axe discriminante gÄƒsite de LDA.
        Rezultatul (scores) â†’ O matrice unde fiecare rÃ¢nd reprezintÄƒ un scor discriminant pentru fiecare instanÈ›Äƒ din X_train.

        Ce reprezintÄƒ aceste scoruri?

        Sunt coordonatele fiecÄƒrei instanÈ›e Ã®n spaÈ›iul LDA.
        Permit vizualizarea separÄƒrii claselor.
        Pot fi folosite ca features reduse dimensional pentru modele de clasificare.

        NumÄƒrul maxim de dimensiuni (componente LDA) este min(nr clase - 1, nr var initiale)
        scores.shape[1] ne aratÄƒ cÃ¢te dimensiuni au fost pÄƒstrate
        """

    # 5. Facem predicÈ›ii pe setul de testare
    ## PredicÈ›ia Ã®n setul de testare model liniar/bayesian
    y_pred = model.predict(X_test)

    """
        model.predict(X_test) FoloseÈ™te modelul antrenat pentru a determina clasa fiecÄƒrei observaÈ›ii din X_test
        y_pred Este un vector care conÈ›ine clasele prezise de LDA pentru fiecare rÃ¢nd din X_test
    """

    # 6. EvaluÄƒm performanÈ›a modelului
    ## Evaluare model pe setul de testare (matricea de confuzie + indicatori de acurateÈ›e) SAU
    ## Evaluare model bayesian (matricea de confuzie + indicatori de acurateÈ›e)
    conf_matrix = confusion_matrix(y_test, y_pred)
    accuracy = accuracy_score(y_test, y_pred)
    classification_rep = classification_report(y_test, y_pred)

    """
        confusion_matrix(y_test, y_pred) â†’ Matricea de confuzie
        AratÄƒ cÃ¢te predicÈ›ii au fost corecte È™i cÃ¢te au fost greÈ™ite, comparÃ¢nd y_pred cu y_test.
        Matrice CxC, unde fiecare rÃ¢nd reprezintÄƒ clasele reale, iar fiecare coloanÄƒ reprezintÄƒ clasele prezise.

        accuracy_score(y_test, y_pred) â†’ ReturneazÄƒ procentajul instanÈ›elor clasificate corect (intre 0 si 1)

        classification_report â†’ Raport detaliat de clasificare
        Include 3 metrici importante pentru fiecare clasÄƒ:
        - Precizie (Precision) â†’ CÃ¢t de multe predicÈ›ii pentru o clasÄƒ sunt corecte?
        Precision = TP / (TP + FP)
        Recall = TP / (TP + FN)
        F1_Score = 2 * (precision * recall) / (precision + recall)
        - Recall (Sensibilitate) â†’ CÃ¢t de multe instanÈ›e reale dintr-o clasÄƒ au fost corect identificate?
        - F1-Score â†’ Media armonicÄƒ dintre Precision È™i Recall, mai utilÄƒ cÃ¢nd avem clase dezechilibrate.
        F1-Score apr de 1 => model apr perfect
    """

    # 7. Facem predicÈ›ii pe un set de aplicare
    ## PredicÈ›ia Ã®n setul de aplicare model liniar/bayesian
    X_new = X_test[:5]  # Folosim primele 5 instanÈ›e ca exemplu de aplicare
    y_pred_application = model.predict(X_new)

    """
    Aici folosim modelul antrenat (LDA sau QDA) pentru a face predicÈ›ii pe un set de aplicare (nu avem unul nou asa ca luam X_test[:5])
    predict aplica modelul antrenat si returneaza etichetele 
    """

    return {
        "model": model,
        "scores": scores,
        "X_test": X_test,
        "y_test": y_test,
        "y_pred": y_pred,
        "confusion_matrix": conf_matrix,
        "accuracy": accuracy,
        "classification_report": classification_rep,
        "X_new": X_new,
        "y_pred_application": y_pred_application
    }


# ===================== VizualizÄƒri =====================

## Trasare plot instanÈ›e Ã®n axe discriminante
def plot_lda_scatter(scores, y_train):
    """ Scatter plot pentru instanÈ›e Ã®n spaÈ›iul discriminant """
    if scores is None:
        print("QDA nu genereazÄƒ un spaÈ›iu discriminant.")
        return

    plt.figure(figsize=(8, 6))
    unique_classes = np.unique(y_train)

    for cls in unique_classes:
        plt.scatter(scores[y_train == cls, 0],
                    scores[y_train == cls, 1] if scores.shape[1] > 1 else np.zeros_like(scores[y_train == cls, 0]),
                    label=f"Class {cls}")

    plt.axhline(0, color='grey', linestyle='--')
    plt.axvline(0, color='grey', linestyle='--')
    plt.xlabel("Discriminant Function 1")
    plt.ylabel("Discriminant Function 2" if scores.shape[1] > 1 else "Zero Line")
    plt.title("Plot InstanÈ›e Ã®n Axe Discriminante")
    plt.legend()
    plt.show()


## Trasare plot distribuÈ›ii Ã®n axele discriminante
def plot_lda_distribution(scores, y_train):
    """ DistribuÈ›ia scorurilor pe axele discriminante """
    if scores is None:
        print("QDA nu genereazÄƒ scoruri discriminante.")
        return

    plt.figure(figsize=(8, 6))
    for cls in np.unique(y_train):
        sns.kdeplot(scores[y_train == cls, 0], label=f"Class {cls}", fill=True, alpha=0.5)

    plt.xlabel("Discriminant Function 1")
    plt.ylabel("Density")
    plt.title("DistribuÈ›ia Scorurilor Discriminante")
    plt.legend()
    plt.show()


## Matricea de confuzie
def plot_confusion_matrix(conf_matrix, title="Matricea de Confuzie"):
    """ CorelogramÄƒ pentru matricea de confuzie """
    plt.figure(figsize=(6, 5))
    sns.heatmap(conf_matrix, annot=True, cmap="Blues", fmt="d")
    plt.xlabel("Predicted Label")
    plt.ylabel("True Label")
    plt.title(title)
    plt.show()


# ===================== Aplicarea Analizei Discriminante pe Iris =====================

# ðŸ“Œ ÃŽncÄƒrcÄƒm setul de date Iris
iris = load_iris()
X, y = iris.data, iris.target

# ðŸš€ AplicÄƒm LDA
lda_results = perform_discriminant_analysis(X, y, model_type="LDA")
qda_results = perform_discriminant_analysis(X, y, model_type="QDA")

# ðŸ“Š VizualizÄƒri pentru LDA
plot_lda_scatter(lda_results["scores"], y[:len(lda_results["scores"])])
plot_lda_distribution(lda_results["scores"], y[:len(lda_results["scores"])])
plot_confusion_matrix(lda_results["confusion_matrix"], title="Matricea de Confuzie - LDA")

# ðŸ“Š VizualizÄƒri pentru QDA
plot_confusion_matrix(qda_results["confusion_matrix"], title="Matricea de Confuzie - QDA")

# ðŸ“„ AfiÈ™Äƒm raportul de clasificare pentru LDA È™i QDA
print("Evaluare LDA:")
print(lda_results["classification_report"])
print("\nEvaluare QDA:")
print(qda_results["classification_report"])

# ðŸ“Œ AfiÈ™Äƒm predicÈ›iile pe setul de aplicare
print("\nPredicÈ›ia pe setul de aplicare - LDA:", lda_results["y_pred_application"])
print("PredicÈ›ia pe setul de aplicare - QDA:", qda_results["y_pred_application"])
